name: Web Application Develop Server CI/CD

on:
  pull_request:
    branches: ["main"]
    types:
      - opened
      - synchronize
      - closed

env:
  CONTAINER_NAME: teolmungchi

jobs:
  CI:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: 'pnpm'

      - name: Install pnpm
        run: |
          npm install -g pnpm
          NPM_PREFIX=$(npm config get prefix)
          echo "$NPM_PREFIX/bin" >> $GITHUB_PATH
          echo "pnpm version: $(pnpm --version)"

      - name: Install Dependencies
        run: pnpm install

      - name: Build NestJS Application
        run: pnpm run build


      # PR이 병합된 경우 Docker 이미지 빌드 및 푸시
      - name: Login to Docker Hub
        if: github.event.pull_request.merged == true
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        if: github.event.pull_request.merged == true
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{ github.run_number }},${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  CD:
    if: github.event.pull_request.merged == true
    needs: [CI]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST_DEV }}
          username: ${{ secrets.REMOTE_USERNAME_DEV }}
          key: ${{ secrets.REMOTE_SSH_KEY_DEV }}
          port: ${{ secrets.REMOTE_PORT_DEV }}
          script: |
            docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker image rm ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }} || true

            # .env 파일 생성
            echo "${{ secrets.ENV }}" | base64 --decode > /home/${{ secrets.REMOTE_USERNAME_DEV }}/.env

            # 새 컨테이너 실행, .env 파일 주입
            docker run -d -p 3000:3000 \
              --name ${{ env.CONTAINER_NAME }} \
              --env-file /home/${{ secrets.REMOTE_USERNAME_DEV }}/.env \
              --restart=unless-stopped \
              --log-opt max-size=10m --log-opt max-file=3 \
              ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{ github.run_number }}

            docker image prune -f