name: Backend CI & CD (dev)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  CONTAINER_NAME: teolmungchi

jobs:
  Continuous-Integration:
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: 'pnpm'

      - name: Install pnpm
        run: |
          npm install -g pnpm
          pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Build NestJS application
        run: pnpm run build

      - name: (Push) Archive production artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  Continuous-Deploy:
    if: github.event_name == 'push'
    needs: Continuous-Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download a built artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{ github.run_number }}
            ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create and execute deploy script
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e

          sudo docker rm -f ${{ env.CONTAINER_NAME }} || true
          sudo docker rmi ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }} || true
          sudo docker pull ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{ github.run_number }}
          sudo docker run -d -p 3000:3000 \
            --restart=unless-stopped \
            --log-opt max-size=10m --log-opt max-file=3 \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{ github.run_number }}

          echo "Deployment completed."
          EOF

      - name: Transfer Deploy Script use SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_DEV }}
          port: ${{ secrets.REMOTE_PORT_DEV }}
          username: ${{ secrets.REMOTE_USERNAME_DEV }}
          key: ${{ secrets.REMOTE_SSH_KEY_DEV }}
          source: deploy.sh
          target: /home/${{ secrets.REMOTE_USERNAME_DEV }}/deploy

      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_DEV }}
          port: ${{ secrets.REMOTE_PORT_DEV }}
          username: ${{ secrets.REMOTE_USERNAME_DEV }}
          key: ${{ secrets.REMOTE_SSH_KEY_DEV }}
          script_stop: true
          script: |
            chmod +x /home/${{ secrets.REMOTE_USERNAME_DEV }}/deploy/deploy.sh
            sh /home/${{ secrets.REMOTE_USERNAME_DEV }}/deploy/deploy.sh